{"version":3,"sources":["utlis/authorityTools.js"],"names":["getAuthority","str","authority","authorityString","localStorage","getItem","JSON","parse","e","setAuthority","proAuthority","setItem","stringify","clearAuthority","removeItem","getRouteAuthority","pathname","routes","routeAuthority","_getAuthority","_routes","forEach","_route","path","__webpack_require__","r","__webpack_exports__","d"],"mappings":"4FAKO,SAASA,EAAaC,GAC5B,IAEIC,EAFEC,EACU,qBAARF,EAAsBG,aAAaC,QAAQ,gBAAkBJ,EAErE,IACCC,EAAYI,KAAKC,MAAMJ,GACtB,MAAOK,GACRN,EAAYC,EAEb,MAAyB,kBAAdD,EACH,CAACA,GAEFA,EAOD,SAASO,EAAaP,GAC5B,IAAMQ,EAAoC,kBAAdR,EAAyB,CAACA,GAAaA,EACnEE,aAAaO,QAAQ,eAAgBL,KAAKM,UAAUF,IAI9C,SAASG,IACfT,aAAaU,WAAW,gBAQlB,SAASC,EAAkBC,EAAUC,GAC3C,IAAIC,EAAiB,KAWrB,OAVsB,SAAhBC,EAAiBH,EAAUI,GAQhC,OAPAA,EAAQC,QAAQ,SAAAC,GACXN,IAAaM,EAAOC,KACvBL,EAAiBI,EAAOpB,UACdoB,EAAOL,SACjBC,EAAiBC,EAAcH,EAAUM,EAAOL,WAG3CC,EAEDC,CAAcH,EAAUC,GAnDhCO,EAAAC,EAAAC,GAAAF,EAAAG,EAAAD,EAAA,iCAAA1B,IAAAwB,EAAAG,EAAAD,EAAA,iCAAAjB,IAAAe,EAAAG,EAAAD,EAAA,mCAAAb,IAAAW,EAAAG,EAAAD,EAAA,sCAAAX","file":"static/js/101.2528f333.chunk.js","sourcesContent":["/**\n * 获取权限\n * @param {str} string 未处理的权限\n * @return {authority} {Array<string>} 权限结果\n */\nexport function getAuthority(str) {\n\tconst authorityString =\n\t\ttypeof str === 'undefined' ? localStorage.getItem('ra-authority') : str;\n\tlet authority;\n\ttry {\n\t\tauthority = JSON.parse(authorityString);\n\t} catch (e) {\n\t\tauthority = authorityString;\n\t}\n\tif (typeof authority === 'string') {\n\t\treturn [authority];\n\t}\n\treturn authority;\n}\n\n/**\n * 设置权限\n * @param {authority} string|array 权限\n */\nexport function setAuthority(authority) {\n\tconst proAuthority = typeof authority === 'string' ? [authority] : authority;\n\tlocalStorage.setItem('ra-authority', JSON.stringify(proAuthority));\n}\n\n// 清除权限\nexport function clearAuthority() {\n\tlocalStorage.removeItem('ra-authority');\n}\n\n/**\n * 获取路由权限\n * @param {pathname} string 路由路径\n * @return {routeAuthority} {string} 路由对应权限\n */\nexport function getRouteAuthority(pathname, routes) {\n\tlet routeAuthority = null;\n\tconst _getAuthority = (pathname, _routes) => {\n\t\t_routes.forEach(_route => {\n\t\t\tif (pathname === _route.path) {\n\t\t\t\trouteAuthority = _route.authority;\n\t\t\t} else if (_route.routes) {\n\t\t\t\trouteAuthority = _getAuthority(pathname, _route.routes);\n\t\t\t}\n\t\t});\n\t\treturn routeAuthority;\n\t};\n\treturn _getAuthority(pathname, routes);\n}\n"],"sourceRoot":""}