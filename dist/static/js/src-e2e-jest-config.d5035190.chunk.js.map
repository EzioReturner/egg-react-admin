{"version":3,"sources":["webpack:///./jest.config.js","webpack:///./node_modules/path-browserify/index.js","webpack:///./src/e2e/jest.config.js"],"names":["path","require","module","exports","rootDir","resolve","__dirname","testRegex","setupFiles","preset","moduleNameMapper","transform","globals","normalizeArray","parts","allowAboveRoot","up","i","length","last","splice","unshift","filter","xs","f","res","push","resolvedPath","resolvedAbsolute","arguments","process","cwd","TypeError","charAt","split","p","join","normalize","isAbsolute","trailingSlash","substr","paths","Array","prototype","slice","call","index","relative","from","to","trim","arr","start","end","fromParts","toParts","Math","min","samePartsLength","outputParts","concat","sep","delimiter","dirname","code","charCodeAt","hasRoot","matchedSlash","basename","ext","extname","startDot","startPart","preDotState","str","len","config","Object","assign"],"mappings":"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","file":"static/js/src-e2e-jest-config.d5035190.chunk.js","sourcesContent":["const path = require('path');\n\nmodule.exports = {\n  rootDir: path.resolve(__dirname, './'),\n  testRegex: './*\\\\.test\\\\.js$',\n  setupFiles: ['<rootDir>/jest.setup.js'],\n  preset: 'jest-puppeteer',\n  moduleNameMapper: {\n    '^@assets(.*)$': '<rootDir>/src/assets$1',\n    '^@components(.*)$': '<rootDir>/src/components$1',\n    '^@utils(.*)$': '<rootDir>/src/utils$1',\n    '^@models(.*)$': '<rootDir>/src/models$1',\n    '^@config(.*)$': '<rootDir>/src/config$1'\n  },\n  transform: {\n    '^.+\\\\.(tsx|js|ts)?$': 'babel-jest',\n    '^.+\\\\.svg$': 'jest-svg-transformer'\n  },\n  globals: {}\n};\n","// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,\n// backported and transplited with Babel, with backwards-compat fixes\n\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n// resolves . and .. elements in a path array with directory names there\n// must be no slashes, empty elements, or device names (c:\\) in the array\n// (so also no leading and trailing slashes - it does not distinguish\n// relative and absolute paths)\nfunction normalizeArray(parts, allowAboveRoot) {\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = parts.length - 1; i >= 0; i--) {\n    var last = parts[i];\n    if (last === '.') {\n      parts.splice(i, 1);\n    } else if (last === '..') {\n      parts.splice(i, 1);\n      up++;\n    } else if (up) {\n      parts.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (allowAboveRoot) {\n    for (; up--; up) {\n      parts.unshift('..');\n    }\n  }\n\n  return parts;\n}\n\n// path.resolve([from ...], to)\n// posix version\nexports.resolve = function() {\n  var resolvedPath = '',\n      resolvedAbsolute = false;\n\n  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    var path = (i >= 0) ? arguments[i] : process.cwd();\n\n    // Skip empty and invalid entries\n    if (typeof path !== 'string') {\n      throw new TypeError('Arguments to path.resolve must be strings');\n    } else if (!path) {\n      continue;\n    }\n\n    resolvedPath = path + '/' + resolvedPath;\n    resolvedAbsolute = path.charAt(0) === '/';\n  }\n\n  // At this point the path should be resolved to a full absolute path, but\n  // handle relative paths to be safe (might happen when process.cwd() fails)\n\n  // Normalize the path\n  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {\n    return !!p;\n  }), !resolvedAbsolute).join('/');\n\n  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';\n};\n\n// path.normalize(path)\n// posix version\nexports.normalize = function(path) {\n  var isAbsolute = exports.isAbsolute(path),\n      trailingSlash = substr(path, -1) === '/';\n\n  // Normalize the path\n  path = normalizeArray(filter(path.split('/'), function(p) {\n    return !!p;\n  }), !isAbsolute).join('/');\n\n  if (!path && !isAbsolute) {\n    path = '.';\n  }\n  if (path && trailingSlash) {\n    path += '/';\n  }\n\n  return (isAbsolute ? '/' : '') + path;\n};\n\n// posix version\nexports.isAbsolute = function(path) {\n  return path.charAt(0) === '/';\n};\n\n// posix version\nexports.join = function() {\n  var paths = Array.prototype.slice.call(arguments, 0);\n  return exports.normalize(filter(paths, function(p, index) {\n    if (typeof p !== 'string') {\n      throw new TypeError('Arguments to path.join must be strings');\n    }\n    return p;\n  }).join('/'));\n};\n\n\n// path.relative(from, to)\n// posix version\nexports.relative = function(from, to) {\n  from = exports.resolve(from).substr(1);\n  to = exports.resolve(to).substr(1);\n\n  function trim(arr) {\n    var start = 0;\n    for (; start < arr.length; start++) {\n      if (arr[start] !== '') break;\n    }\n\n    var end = arr.length - 1;\n    for (; end >= 0; end--) {\n      if (arr[end] !== '') break;\n    }\n\n    if (start > end) return [];\n    return arr.slice(start, end - start + 1);\n  }\n\n  var fromParts = trim(from.split('/'));\n  var toParts = trim(to.split('/'));\n\n  var length = Math.min(fromParts.length, toParts.length);\n  var samePartsLength = length;\n  for (var i = 0; i < length; i++) {\n    if (fromParts[i] !== toParts[i]) {\n      samePartsLength = i;\n      break;\n    }\n  }\n\n  var outputParts = [];\n  for (var i = samePartsLength; i < fromParts.length; i++) {\n    outputParts.push('..');\n  }\n\n  outputParts = outputParts.concat(toParts.slice(samePartsLength));\n\n  return outputParts.join('/');\n};\n\nexports.sep = '/';\nexports.delimiter = ':';\n\nexports.dirname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  if (path.length === 0) return '.';\n  var code = path.charCodeAt(0);\n  var hasRoot = code === 47 /*/*/;\n  var end = -1;\n  var matchedSlash = true;\n  for (var i = path.length - 1; i >= 1; --i) {\n    code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        if (!matchedSlash) {\n          end = i;\n          break;\n        }\n      } else {\n      // We saw the first non-path separator\n      matchedSlash = false;\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.';\n  if (hasRoot && end === 1) {\n    // return '//';\n    // Backwards-compat fix:\n    return '/';\n  }\n  return path.slice(0, end);\n};\n\nfunction basename(path) {\n  if (typeof path !== 'string') path = path + '';\n\n  var start = 0;\n  var end = -1;\n  var matchedSlash = true;\n  var i;\n\n  for (i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          start = i + 1;\n          break;\n        }\n      } else if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // path component\n      matchedSlash = false;\n      end = i + 1;\n    }\n  }\n\n  if (end === -1) return '';\n  return path.slice(start, end);\n}\n\n// Uses a mixed approach for backwards-compatibility, as ext behavior changed\n// in new Node.js versions, so only basename() above is backported here\nexports.basename = function (path, ext) {\n  var f = basename(path);\n  if (ext && f.substr(-1 * ext.length) === ext) {\n    f = f.substr(0, f.length - ext.length);\n  }\n  return f;\n};\n\nexports.extname = function (path) {\n  if (typeof path !== 'string') path = path + '';\n  var startDot = -1;\n  var startPart = 0;\n  var end = -1;\n  var matchedSlash = true;\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find\n  var preDotState = 0;\n  for (var i = path.length - 1; i >= 0; --i) {\n    var code = path.charCodeAt(i);\n    if (code === 47 /*/*/) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now\n        if (!matchedSlash) {\n          startPart = i + 1;\n          break;\n        }\n        continue;\n      }\n    if (end === -1) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension\n      matchedSlash = false;\n      end = i + 1;\n    }\n    if (code === 46 /*.*/) {\n        // If this is our first dot, mark it as the start of our extension\n        if (startDot === -1)\n          startDot = i;\n        else if (preDotState !== 1)\n          preDotState = 1;\n    } else if (startDot !== -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension\n      preDotState = -1;\n    }\n  }\n\n  if (startDot === -1 || end === -1 ||\n      // We saw a non-dot character immediately before the dot\n      preDotState === 0 ||\n      // The (right-most) trimmed path component is exactly '..'\n      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {\n    return '';\n  }\n  return path.slice(startDot, end);\n};\n\nfunction filter (xs, f) {\n    if (xs.filter) return xs.filter(f);\n    var res = [];\n    for (var i = 0; i < xs.length; i++) {\n        if (f(xs[i], i, xs)) res.push(xs[i]);\n    }\n    return res;\n}\n\n// String.prototype.substr - negative index don't work in IE8\nvar substr = 'ab'.substr(-1) === 'b'\n    ? function (str, start, len) { return str.substr(start, len) }\n    : function (str, start, len) {\n        if (start < 0) start = str.length + start;\n        return str.substr(start, len);\n    }\n;\n","const path = require('path');\nconst config = require('../../jest.config');\n\nmodule.exports = Object.assign({}, config, {\n  rootDir: path.resolve(__dirname, '../../'),\n  testRegex: './*\\\\.e2e\\\\.js$'\n});\n"],"sourceRoot":""}