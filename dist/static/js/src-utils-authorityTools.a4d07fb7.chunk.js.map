{"version":3,"sources":["webpack:///./src/utils/authorityTools.ts"],"names":["getAuthority","str","authority","authorityString","localStorage","getItem","JSON","parse","e","setAuthority","proAuthority","setItem","stringify","clearAuthority","removeItem","getRouteAuthority","pathname","routeAuthority","_getAuthority","_routes","forEach","_route","path","routes"],"mappings":"uHAMO,SAASA,EAAaC,GAC3B,IACIC,EADEC,EAAiC,qBAARF,EAAsBG,aAAaC,QAAQ,gBAAkBJ,EAE5F,IAEEC,EAAYI,KAAKC,MAAMJ,GACvB,MAAOK,GACPN,EAAYC,EAEd,MAAyB,kBAAdD,EACF,CAACA,GAEHA,EAOF,SAASO,EAAaP,GAC3B,IAAMQ,EAAoC,kBAAdR,EAAyB,CAACA,GAAaA,EACnEE,aAAaO,QAAQ,eAAgBL,KAAKM,UAAUF,IAI/C,SAASG,IACdT,aAAaU,WAAW,gBAQnB,SAASC,EAAkBC,GAA+C,IAC3EC,EAWJ,OAVsB,SAAhBC,EAAiBF,EAAkBG,GAQvC,OAPAA,EAAQC,SAAQ,SAAAC,GACVL,IAAaK,EAAOC,KACtBL,EAAiBI,EAAOnB,UACfmB,EAAOE,SAChBN,EAAiBC,EAAcF,EAAUK,EAAOE,YAG7CN,EAEFC,CAAcF,EAZyD,uDAAJ,IAvC5E","file":"static/js/src-utils-authorityTools.a4d07fb7.chunk.js","sourcesContent":["import { RouteConfig } from '@models/layout';\n/**\n * 获取权限\n * @param {str} string 未处理的权限\n * @return {authority} {Array<string>} 权限结果\n */\nexport function getAuthority(str?: string | string[]) {\n  const authorityString = typeof str === 'undefined' ? localStorage.getItem('RA-authority') : str;\n  let authority;\n  try {\n    // @ts-ignore\n    authority = JSON.parse(authorityString);\n  } catch (e) {\n    authority = authorityString;\n  }\n  if (typeof authority === 'string') {\n    return [authority];\n  }\n  return authority;\n}\n\n/**\n * 设置权限\n * @param {authority} string|array 权限\n */\nexport function setAuthority(authority: string | string[]) {\n  const proAuthority = typeof authority === 'string' ? [authority] : authority;\n  localStorage.setItem('RA-authority', JSON.stringify(proAuthority));\n}\n\n// 清除权限\nexport function clearAuthority() {\n  localStorage.removeItem('RA-authority');\n}\n\n/**\n * 获取路由权限\n * @param {pathname} string 路由路径\n * @return {routeAuthority} {string} 路由对应权限\n */\nexport function getRouteAuthority(pathname: string, routes: RouteConfig[] = []) {\n  let routeAuthority: undefined | string | string[];\n  const _getAuthority = (pathname: string, _routes: RouteConfig[]) => {\n    _routes.forEach(_route => {\n      if (pathname === _route.path) {\n        routeAuthority = _route.authority;\n      } else if (_route.routes) {\n        routeAuthority = _getAuthority(pathname, _route.routes);\n      }\n    });\n    return routeAuthority;\n  };\n  return _getAuthority(pathname, routes);\n}\n"],"sourceRoot":""}